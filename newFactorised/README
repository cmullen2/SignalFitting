This example follows on from newEventsPDF,(You may need to read the README there to follow this!) but covers the case when it is required to fit 2 variables to disentangle 2 sepetate types of background. The method employed is to perform 2 "factorised" fits the second using the weights from the first to remove one of the contributions from the first fit. Note the resulting weights after the second fit will be the product of the sWeights from the 2 fits.
/////////////////////////////////////////////////////////////////////
MODEL
In this case there is a signal and 2 backgrounds. The signal and BG1 have the same shape in the Mmiss variable, while BG2 is different. The signal and BG1 have different distributions in M1 so this can be used as a second discriminatory variable.
The branches are similar as for newEventPDF
To produce the data files :
    root 'ModelMulti.C( "Data.root" ,113)'
You can also run it twice (changing Data.root to different file name) to produce statistically distinct data sets. But then you need to edit the ROOT macros with the correct file name.
/////////////////////////////////////////////////////////////////////
FitHSFactorisedMmiss.C
The first fit is going to be on Mmiss to seperate the Signal and BG1 from BG2.
The code is very similar to testEventPDF, some parts are highlighted here:
Create sPlot object and give an output directory.
  THSsPlot* RF=new THSsPlot("SF");
  RF->SetOutDir("outMmiss/");
First I am going to fit Mmiss
  RF->LoadVariable("Mmiss[0,10]");//should be same name as variable in tree 

Now I am going to merge the "not BG2" species into 1 PDF as they have the same shape. By adding both Sig.root and BG1.root to the same chain.
Note now when loading the species there are 3 sets Signal, BG1 and BG2.

  RF->Factory("RooHSEventsHistPDF::Sig(Mmiss,alpha[0,0,20],off[0,-2,2],scale[1,0.8,1.2])");
  RooHSEventsHistPDF* pdf=dynamic_cast<RooHSEventsHistPDF*>(RF->GetWorkSpace()->pdf("Sig"));
  //Attach MC signal data
  TChain *chainmc=new TChain("MyModel","mcsignal");
  chainmc->Add("SigData.root");
  chainmc->Add("BG1Data.root");
  pdf->SetEvTree(chainmc);
  RF->LoadSpeciesPDF("Sig",1);
  
And similarily create the BG2 PDF using just its file
To produce weights to seperate BG2 from Sig and BG1 :
   root --hsfit FitHSFactorisedMmiss.C
//////////////////////////////////////////////////////////////////
Part 2
The weights I found in the first fit can now be used to seperate out Signal and BG1. I will perform a second fit on their discriminatory variable to isolate the Signal distribution only. I no longer need a PDF or events for BG2

FitHSFactorisedM1.C
I first split the data into bins as detailed in newEventsPDF.
**IT IS IMPORTANT here to match the variable limits of non fitted
variables to those defined in the Mmiss fit so the same events are
used to make the PDF shapes.
  RF->LoadVariable("M1[0,10]");//should be same name as variable in tree 
  RF->LoadBinVars("Mmiss",1,0,10);//Not to be fitted but limits applied to dataset
  RF->LoadBinVars("Eg",10,3,4);//Not to be fitted but bins used to split fits

Now I load my two types of species and create a PDF for the variable M1,
   RF->Factory("RooHSEventsHistPDF::Sig1(M1,alpha[0,0,20],off[0,-0,0],scale[1,1,1])");
  RooHSEventsHistPDF* pdf=dynamic_cast<RooHSEventsHistPDF*>(RF->GetWorkSpace()->pdf("Sig1"));
  RF->LoadSpeciesPDF("Sig1",1); 
and so on
The only real difference is in loading the data.Here we must give the name of the file containing the weights from the fits in part1, as well as the species we want to isolate. In this case we want to fit the Signal and BG1 contributions which were combined into the "Merged" weight.
 
 // //Load weights from Mmiss fit
  RF->LoadWeights("outMmiss/WeightsSF.root","HSsWeights");
  RF->SetWeightName("Sig");

We can then run the sWeights fits as before and draw variables.

  RF->FitSavedBins(1); //argument = number of test fits with random initial pars

Now I need to reload the original tree so I can draw variables
    TChain chain2("MyModel");
  chain2.Add("Data.root");
  RF->LoadDataSet(&chain2);
 

Now I can draw the variables (integrated over all Eg) as before.
  RF->DrawTreeVar("Mmiss",100,0,10);
  RF->DrawTreeVar("M1",100,0,10);
  RF->DrawTreeVar("M2",100,0,10);
